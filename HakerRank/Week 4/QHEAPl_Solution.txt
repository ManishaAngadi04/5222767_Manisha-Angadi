//Problem 4 - QHEAPl

#include <stdio.h>
#include <stdlib.h>

#define MAX 100000

int heap[MAX];
int heapSize = 0;

void swap(int *a, int *b) {
    int t = *a; *a = *b; *b = t;
}

void heapifyDown(int i) {
    int smallest = i;
    int left = 2*i + 1;
    int right = 2*i + 2;

    if (left < heapSize && heap[left] < heap[smallest])
        smallest = left;
    if (right < heapSize && heap[right] < heap[smallest])
        smallest = right;

    if (smallest != i) {
        swap(&heap[i], &heap[smallest]);
        heapifyDown(smallest);
    }
}

void heapifyUp(int i) {
    if (i && heap[(i-1)/2] > heap[i]) {
        swap(&heap[i], &heap[(i-1)/2]);
        heapifyUp((i-1)/2);
    }
}

void insertHeap(int val) {
    heap[heapSize] = val;
    heapifyUp(heapSize);
    heapSize++;
}

int findIndex(int val) {
    for (int i = 0; i < heapSize; i++)
        if (heap[i] == val) return i;
    return -1;
}

void deleteHeap(int val) {
    int idx = findIndex(val);
    if (idx == -1) return;

    heap[idx] = heap[heapSize-1];
    heapSize--;

    heapifyDown(idx);
    heapifyUp(idx);
}

int getMin() {
    return heap[0];
}

int main() {
    int Q;
    scanf("%d", &Q);

    while (Q--) {
        int type, v;
        scanf("%d", &type);

        if (type == 1) {
            scanf("%d", &v);
            insertHeap(v);
        } else if (type == 2) {
            scanf("%d", &v);
            deleteHeap(v);
        } else if (type == 3) {
            printf("%d\n", getMin());
        }
    }

    return 0;  
}
